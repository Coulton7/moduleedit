<?php
/**
 * @file
 * An example field using the Field Types API.
 */

/**
 * @defgroup social_profile_field Example: Field Types API
 * @ingroup examples
 * @{
 * Examples using Field Types API.
 *
 * This is updated from Barry Jaspan's presentation at Drupalcon Paris,
 * @link http://acquia.com/community/resources/acquia-tv/intro-field-api-module-developers Video Presentation @endlink
 *
 * Providing a field requires:
 * - Defining a field:
 *   - hook_field_info()
 *   - hook_field_schema()
 *   - hook_field_validate()
 *   - hook_field_is_empty()
 *
 * - Defining a formatter for the field (the portion that outputs the field for
 *   display):
 *   - hook_field_formatter_info()
 *   - hook_field_formatter_view()
 *
 * - Defining a widget for the edit form:
 *   - hook_field_widget_info()
 *   - hook_field_widget_form()
 *
 * Our module defines the field in social_profile_field_field_info(),
 * social_profile_field_field_validate() and social_profile_field_field_is_empty().
 * social_profile_field_field_schema() is implemented in social_profile_field.install.
 *
 * Our module sets up a formatter in social_profile_field_field_formatter_info() and
 * social_profile_field_field_formatter_view(). These are the API hooks that present
 * formatted and themed output to the user.
 * And finally, our module defines the widet in
 * social_profile_field_field_widget_info() and social_profile_field_field_widget_form().
 * The widget is the form element used to receive input from the user
 * when the field is being populated.
 *
 * @see field_types
 * @see field
 */

/***************************************************************
 * Field Type API hooks
 ***************************************************************/

/**
 * Implements hook_field_info().
 *
 * Provides the description of the field.
 */
function social_profile_field_field_info() {
  return array(
    // We name our field as the associative name of the array.
    'social_profile_field_url' => array(
      'label' => t('Social Profile'),
      'description' => t('Handle social profiles links.'),
      'default_widget' => 'social_profile_field_default',
      'default_formatter' => 'social_profile_field_icons',
    ),
  );
}/*Applies the default settings to the module*/

/**
 * Implements hook_field_validate().
 *
 * This hook gives us a chance to validate content that's in our
 * field. We're really only interested in the $items parameter, since
 * it holds arrays representing content in the field we've defined.
 * We want to verify that the items only contain valid URLs.
 * If the item validates, we do nothing. If it doesn't
 * validate, we add our own error notification to the $errors parameter.
 *
 * @see social_profile_field_field_widget_error()
 */
function social_profile_field_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    if (!empty($item['url'])) {
      if (!valid_url($item['url'], TRUE)) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'social_profile_field_invalid',
          'message' => t('URL is invalid. Please check it and provide a valid URL.'),
        );
      }
    }
  }
}/*Validates the the url that has been entered in the box and if it is invalid display an
error message and the function that does this are implemented below*/

/**
 * Implements hook_field_is_empty().
 *
 * hook_field_is_emtpy() is where Drupal asks us if this field is empty.
 * Return TRUE if it does not contain data, FALSE if it does. This lets
 * the form API flag an error when required fields are empty.
 */
function social_profile_field_field_is_empty($item, $field) {
  return empty($item['url']);
}/*Error flag when the field is empty and how the error is brought up
is at the bottom of the module code*/

/**
 * Implements hook_field_formatter_info().
 *
 * We need to tell Drupal that we have two different types of formatters
 * for this field. One will change the text color, and the other will
 * change the background color.
 *
 * @see social_profile_field_field_formatter_view()
 */
function social_profile_field_field_formatter_info() {
  return array(
    // This formatter just displays the hex value in the color indicated.
    'social_profile_field_icons' => array(
      'label' => t('Show Social Networks icons.'),
      'field types' => array('social_profile_field_url'),
    ),
    // This formatter changes the background color of the content region.
    'social_profile_field_list' => array(/*Declares the that thi section will have an
      array of features*/
      'label' => t('Show list of links to Social Network Profiles.'),/*the t() value
      is used for to have the value be translatable and then the command
      shows the links bewlow */
      'field types' => array('social_profile_field_url'),/*Declares and grabs
      the array of field types*/
    ),
  );
}

/**
 * Returns domain name (with subdomains) for given URL.
 * @url string URL.
 * @result string Domain name.
 */
function _social_profile_field_get_domain($url) {
  return parse_url(check_url(trim($url)), PHP_URL_HOST);
}/*The full url then trims it down so it can the the domain name which will be
used for gett hold of the correct image with the corresponding website*/

/**
 * Returns path to icon file.
 */
function _social_profile_field_get_icon_path($domain = 'default') {
  return drupal_get_path('module', 'social_profile_field') . '/icons/' . $domain . '.png';
/*Once the domain path has been trimmed down and this function looks at the path
then checks the folder, which the path has been defined to and gets the image based off
the domain, e.g Facebook gets facebook logo, but others get default logo*/

  /*Placing an image in the file path includes the imager in the icon field
  could possibly replace with svg and change the moudle for the svg also doesn't
  to target css file first */
}

/**
 * Returns path to social network icon.
 * @url string URL.
 * @return string Rendered HTML-code for icon..
 */
function _social_profile_field_get_icon($domain) {/*Declares the fuction*/
  $path = _social_profile_field_get_icon_path($domain);/*Follows the path specfified above for it
   to get the appropiate taregt*/
  if (!file_exists($path)) {/*if path exists grab the files*/
    $path = _social_profile_field_get_icon_path();/*calls the path*/
  }
  return theme('image', array(
    'path' => $path,
    'attributes' => array('class' => 'social-profile-icon'),
  ));/*Returns from following the path with an image while giving the icon a class of
   social profile icon*/
}

/**
 * Implements hook_field_formatter_view().
 *
 * Two formatters are implemented.
 * - social_profile_field_icons outputs Social Network icons linked to user's profiles.
 * - social_profile_field_list shows list of links.
 *
 * @see social_profile_field_field_formatter_info()
 */
function social_profile_field_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  switch ($display['type']) {/*Declares the function*/
    // This formatter simply outputs the field as text and with a color.
    case 'social_profile_field_icons':/*looks at the above functions work
     with the social profile icons*/
      foreach ($items as $delta => $item) {/*Checks each item andf delta of the object*/
        $class = array('social-link');/*looks at the array of classes with social link*/
        $domain = _social_profile_field_get_domain($item['url']);/*gets hold of the domain
         and looks at the url does not need editing*/
        if ($domain == 'www.youtube.com' || $domain == 'youtube.com') {/*if the domain entered
          has youtube.com and wwww.youtube.com does not need editing*/
          $class[] = 'fancybox-video';/*adds the class of fancybox-video which is a
          pop-up window which will contain the youtube video itself
          (possibly need to change for a channel what it does) does not need editing*/
        }
        $element[$delta] = array(/*gets the delta fig for the array that has been called*/
          '#markup' => l(/*used to output an html*/
            _social_profile_field_get_icon($domain),/*Gets hold of the icon and domain/url*/
            check_url(trim($item['url'])),/*checks if the url matches on of the items*/
            array('html' => TRUE, 'attributes' => array('class' => $class, 'target' => '_blank'))
          ),/*once the url is shown as true the classes are added and then target_blank added to
          the html which opens a new window when the link is clicked on*/
          '#attached' => array(/*looks at the loading technique for the arrays*/
            'css' => array(/*Starts to target the css file for the array of addresses*/
              drupal_get_path('module', 'social_profile_field') . '/social_profile_field.css',
            )/*States the path for drupal to follow to get the styling
            for the social media icons keep path but edit the css file*/
          ),
        );
      }
      break;
    case 'social_profile_field_list':/*gets hold of the list of social links*/
      foreach ($items as $delta => $item) {/*says to add items on to each delta*/
        $element[$delta] = array(/*for each element (using delta) it targets each one*/
          '#markup' => l($item['url'], $item['url'], array('attributes' => array('class' => array('social-link')))),
        );/*using markup on each listed item it adds the classes above to the item with the
        arrays declared earlier*/
      }
      break;
  }

  return $element;/*Returns the element which has been declared
  and broken down above and has the conditional statements*/
}

/**
 * Implements hook_field_widget_info().
 *
 * Three widgets are provided.
 * - A simple text-only widget where the user enters the '#ffffff'.
 * - A 3-textfield widget that gathers the red, green, and blue values
 *   separately.
 * - A farbtastic colorpicker widget that chooses the value graphically.
 *
 * These widget types will eventually show up in hook_field_widget_form,
 * where we will have to flesh them out.
 *
 * @see social_profile_field_field_widget_form()
 */
function social_profile_field_field_widget_info() {
  return array(
    'social_profile_field_default' => array(
      'label' => t('Default'),
      'field types' => array('social_profile_field_url'),
    ),
  );/*The section of code is used to show how the form will look for the
   social profile field*/
}

/**
 * Implements hook_field_widget_form().
 *
 * hook_widget_form() is where Drupal tells us to create form elements for
 * our field's widget.
 *
 * We provide one of three different forms, depending on the widget type of
 * the Form API item provided.
 *
 * The 'social_profile_field_colorpicker' and 'social_profile_field_text' are essentially
 * the same, but social_profile_field_colorpicker adds a javascript colorpicker
 * helper.
 *
 * social_profile_field_text displays three text fields, one each for red, green,
 * and blue. However, the field type defines a single text column,
 * url, which needs an HTML color spec. Define an element validate
 * handler that converts our r, g, and b fields into a simulated single
 * 'url' form element.
 */
function social_profile_field_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $value = isset($items[$delta]['url']) ? $items[$delta]['url'] : '';
  $widget = $element;
  $widget['#delta'] = $delta;
  switch ($instance['widget']['type']) {
    case 'social_profile_field_default':
      $widget += array(
        '#type' => 'textfield',/*What datatype it is (textfield)*/
        '#default_value' => $value,/*Puts in a default value which is declared above*/
        '#maxlength' => 255,/*Stes a max length to a text value*/
        '#attributes' => array('class' => array('edit-field-social-profile-url')),
        /*Looks at the attributes and adds the right class to the field/widget*/
        '#attached' => array(//An array for the attached files for the widget
          // Add javascript to show social network icon on the fly:
          'js' => array(
            drupal_get_path('module', 'social_profile_field') . '/js/jquery.urlparser/jquery.url.js',
            drupal_get_path('module', 'social_profile_field') . '/js/social_profile_field.js'
          ),/*Gets the path for the javascript which is in the module file*/
          'css' => array(
            drupal_get_path('module', 'social_profile_field') . '/social_profile_field.css',
          )/*gets the path for the css document and declares the value*/
        ),
      );
      break;
  }
  $element['url'] = $widget;/*states the the elemnt is the same as widegt*/
  return $element;/*returns the element which with the code above we know is now the widget*/
}/*Styles out how the form willl look when it is loaded up on the a field, in epsilon
case it will be how the form will look on the system user file*/

/**
 * Implements hook_field_widget_error().
 *
 * hook_field_widget_error() lets us figure out what to do with errors
 * we might have generated in hook_field_validate(). Generally, we'll just
 * call form_error().
 *
 * @see social_profile_field_field_validate()
 * @see form_error()
 */
function social_profile_field_field_widget_error($element, $error, $form, &$form_state) {
  switch ($error['error']) {
    case 'social_profile_field_invalid':
      form_error($element, $error['message']);
      break;
  }
}/*Command for when the data for the field is incorrectly entered*/

/**
 * @} End of "defgroup social_profile_field".
 */
